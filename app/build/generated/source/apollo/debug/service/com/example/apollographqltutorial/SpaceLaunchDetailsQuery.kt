// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL plugin from the GraphQL queries it found.
// It should not be modified by hand.
//
package com.example.apollographqltutorial

import com.apollographql.apollo.api.Operation
import com.apollographql.apollo.api.OperationName
import com.apollographql.apollo.api.Query
import com.apollographql.apollo.api.Response
import com.apollographql.apollo.api.ResponseField
import com.apollographql.apollo.api.ScalarTypeAdapters
import com.apollographql.apollo.api.ScalarTypeAdapters.Companion.DEFAULT
import com.apollographql.apollo.api.`internal`.InputFieldMarshaller
import com.apollographql.apollo.api.`internal`.OperationRequestBodyComposer
import com.apollographql.apollo.api.`internal`.QueryDocumentMinifier
import com.apollographql.apollo.api.`internal`.ResponseFieldMapper
import com.apollographql.apollo.api.`internal`.ResponseFieldMarshaller
import com.apollographql.apollo.api.`internal`.ResponseReader
import com.apollographql.apollo.api.`internal`.SimpleOperationResponseParser
import com.apollographql.apollo.api.`internal`.Throws
import com.example.apollographqltutorial.type.CustomType
import kotlin.Any
import kotlin.Array
import kotlin.Boolean
import kotlin.String
import kotlin.Suppress
import kotlin.collections.List
import kotlin.collections.Map
import kotlin.jvm.Transient
import okio.Buffer
import okio.BufferedSource
import okio.ByteString
import okio.IOException

@Suppress("NAME_SHADOWING", "UNUSED_ANONYMOUS_PARAMETER", "LocalVariableName",
    "RemoveExplicitTypeArguments", "NestedLambdaShadowedImplicitParameter")
public data class SpaceLaunchDetailsQuery(
  public val launchId: String
) : Query<SpaceLaunchDetailsQuery.Data, SpaceLaunchDetailsQuery.Data, Operation.Variables> {
  @Transient
  private val variables: Operation.Variables = object : Operation.Variables() {
    public override fun valueMap(): Map<String, Any?> = mutableMapOf<String, Any?>().apply {
      this["launchId"] = this@SpaceLaunchDetailsQuery.launchId
    }

    public override fun marshaller(): InputFieldMarshaller = InputFieldMarshaller.invoke { writer ->
      writer.writeCustom("launchId", CustomType.ID, this@SpaceLaunchDetailsQuery.launchId)
    }
  }

  public override fun operationId(): String = OPERATION_ID

  public override fun queryDocument(): String = QUERY_DOCUMENT

  public override fun wrapData(`data`: Data?): Data? = data

  public override fun variables(): Operation.Variables = variables

  public override fun name(): OperationName = OPERATION_NAME

  public override fun responseFieldMapper(): ResponseFieldMapper<Data> =
      ResponseFieldMapper.invoke {
    Data(it)
  }

  @Throws(IOException::class)
  public override fun parse(source: BufferedSource, scalarTypeAdapters: ScalarTypeAdapters):
      Response<Data> = SimpleOperationResponseParser.parse(source, this, scalarTypeAdapters)

  @Throws(IOException::class)
  public override fun parse(byteString: ByteString, scalarTypeAdapters: ScalarTypeAdapters):
      Response<Data> = parse(Buffer().write(byteString), scalarTypeAdapters)

  @Throws(IOException::class)
  public override fun parse(source: BufferedSource): Response<Data> = parse(source, DEFAULT)

  @Throws(IOException::class)
  public override fun parse(byteString: ByteString): Response<Data> = parse(byteString, DEFAULT)

  public override fun composeRequestBody(scalarTypeAdapters: ScalarTypeAdapters): ByteString =
      OperationRequestBodyComposer.compose(
    operation = this,
    autoPersistQueries = false,
    withQueryDocument = true,
    scalarTypeAdapters = scalarTypeAdapters
  )

  public override fun composeRequestBody(): ByteString = OperationRequestBodyComposer.compose(
    operation = this,
    autoPersistQueries = false,
    withQueryDocument = true,
    scalarTypeAdapters = DEFAULT
  )

  public override fun composeRequestBody(
    autoPersistQueries: Boolean,
    withQueryDocument: Boolean,
    scalarTypeAdapters: ScalarTypeAdapters
  ): ByteString = OperationRequestBodyComposer.compose(
    operation = this,
    autoPersistQueries = autoPersistQueries,
    withQueryDocument = withQueryDocument,
    scalarTypeAdapters = scalarTypeAdapters
  )

  public data class Launch_site(
    public val __typename: String = "LaunchSite",
    public val site_name: String?
  ) {
    public fun marshaller(): ResponseFieldMarshaller = ResponseFieldMarshaller.invoke { writer ->
      writer.writeString(RESPONSE_FIELDS[0], this@Launch_site.__typename)
      writer.writeString(RESPONSE_FIELDS[1], this@Launch_site.site_name)
    }

    public companion object {
      private val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
          ResponseField.forString("__typename", "__typename", null, false, null),
          ResponseField.forString("site_name", "site_name", null, true, null)
          )

      public operator fun invoke(reader: ResponseReader): Launch_site = reader.run {
        val __typename = readString(RESPONSE_FIELDS[0])!!
        val site_name = readString(RESPONSE_FIELDS[1])
        Launch_site(
          __typename = __typename,
          site_name = site_name
        )
      }

      @Suppress("FunctionName")
      public fun Mapper(): ResponseFieldMapper<Launch_site> = ResponseFieldMapper { invoke(it) }
    }
  }

  public data class Rocket(
    public val __typename: String = "LaunchRocket",
    public val rocket_name: String?
  ) {
    public fun marshaller(): ResponseFieldMarshaller = ResponseFieldMarshaller.invoke { writer ->
      writer.writeString(RESPONSE_FIELDS[0], this@Rocket.__typename)
      writer.writeString(RESPONSE_FIELDS[1], this@Rocket.rocket_name)
    }

    public companion object {
      private val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
          ResponseField.forString("__typename", "__typename", null, false, null),
          ResponseField.forString("rocket_name", "rocket_name", null, true, null)
          )

      public operator fun invoke(reader: ResponseReader): Rocket = reader.run {
        val __typename = readString(RESPONSE_FIELDS[0])!!
        val rocket_name = readString(RESPONSE_FIELDS[1])
        Rocket(
          __typename = __typename,
          rocket_name = rocket_name
        )
      }

      @Suppress("FunctionName")
      public fun Mapper(): ResponseFieldMapper<Rocket> = ResponseFieldMapper { invoke(it) }
    }
  }

  public data class Links(
    public val __typename: String = "LaunchLinks",
    public val flickr_images: List<String?>?
  ) {
    public fun marshaller(): ResponseFieldMarshaller = ResponseFieldMarshaller.invoke { writer ->
      writer.writeString(RESPONSE_FIELDS[0], this@Links.__typename)
      writer.writeList(RESPONSE_FIELDS[1], this@Links.flickr_images) { value, listItemWriter ->
        value?.forEach { value ->
          listItemWriter.writeString(value)}
      }
    }

    public companion object {
      private val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
          ResponseField.forString("__typename", "__typename", null, false, null),
          ResponseField.forList("flickr_images", "flickr_images", null, true, null)
          )

      public operator fun invoke(reader: ResponseReader): Links = reader.run {
        val __typename = readString(RESPONSE_FIELDS[0])!!
        val flickr_images = readList<String>(RESPONSE_FIELDS[1]) { reader ->
          reader.readString()
        }
        Links(
          __typename = __typename,
          flickr_images = flickr_images
        )
      }

      @Suppress("FunctionName")
      public fun Mapper(): ResponseFieldMapper<Links> = ResponseFieldMapper { invoke(it) }
    }
  }

  public data class Launch(
    public val __typename: String = "Launch",
    public val id: String?,
    public val mission_name: String?,
    public val launch_date_local: Any?,
    public val details: String?,
    public val launch_success: Boolean?,
    public val launch_site: Launch_site?,
    public val rocket: Rocket?,
    public val links: Links?
  ) {
    public fun marshaller(): ResponseFieldMarshaller = ResponseFieldMarshaller.invoke { writer ->
      writer.writeString(RESPONSE_FIELDS[0], this@Launch.__typename)
      writer.writeCustom(RESPONSE_FIELDS[1] as ResponseField.CustomTypeField, this@Launch.id)
      writer.writeString(RESPONSE_FIELDS[2], this@Launch.mission_name)
      writer.writeCustom(RESPONSE_FIELDS[3] as ResponseField.CustomTypeField,
          this@Launch.launch_date_local)
      writer.writeString(RESPONSE_FIELDS[4], this@Launch.details)
      writer.writeBoolean(RESPONSE_FIELDS[5], this@Launch.launch_success)
      writer.writeObject(RESPONSE_FIELDS[6], this@Launch.launch_site?.marshaller())
      writer.writeObject(RESPONSE_FIELDS[7], this@Launch.rocket?.marshaller())
      writer.writeObject(RESPONSE_FIELDS[8], this@Launch.links?.marshaller())
    }

    public companion object {
      private val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
          ResponseField.forString("__typename", "__typename", null, false, null),
          ResponseField.forCustomType("id", "id", null, true, CustomType.ID, null),
          ResponseField.forString("mission_name", "mission_name", null, true, null),
          ResponseField.forCustomType("launch_date_local", "launch_date_local", null, true,
              CustomType.DATE, null),
          ResponseField.forString("details", "details", null, true, null),
          ResponseField.forBoolean("launch_success", "launch_success", null, true, null),
          ResponseField.forObject("launch_site", "launch_site", null, true, null),
          ResponseField.forObject("rocket", "rocket", null, true, null),
          ResponseField.forObject("links", "links", null, true, null)
          )

      public operator fun invoke(reader: ResponseReader): Launch = reader.run {
        val __typename = readString(RESPONSE_FIELDS[0])!!
        val id = readCustomType<String>(RESPONSE_FIELDS[1] as ResponseField.CustomTypeField)
        val mission_name = readString(RESPONSE_FIELDS[2])
        val launch_date_local = readCustomType<Any>(RESPONSE_FIELDS[3] as
            ResponseField.CustomTypeField)
        val details = readString(RESPONSE_FIELDS[4])
        val launch_success = readBoolean(RESPONSE_FIELDS[5])
        val launch_site = readObject<Launch_site>(RESPONSE_FIELDS[6]) { reader ->
          Launch_site(reader)
        }
        val rocket = readObject<Rocket>(RESPONSE_FIELDS[7]) { reader ->
          Rocket(reader)
        }
        val links = readObject<Links>(RESPONSE_FIELDS[8]) { reader ->
          Links(reader)
        }
        Launch(
          __typename = __typename,
          id = id,
          mission_name = mission_name,
          launch_date_local = launch_date_local,
          details = details,
          launch_success = launch_success,
          launch_site = launch_site,
          rocket = rocket,
          links = links
        )
      }

      @Suppress("FunctionName")
      public fun Mapper(): ResponseFieldMapper<Launch> = ResponseFieldMapper { invoke(it) }
    }
  }

  /**
   * Data from the response after executing this GraphQL operation
   */
  public data class Data(
    public val launch: Launch?
  ) : Operation.Data {
    public override fun marshaller(): ResponseFieldMarshaller = ResponseFieldMarshaller.invoke {
        writer ->
      writer.writeObject(RESPONSE_FIELDS[0], this@Data.launch?.marshaller())
    }

    public companion object {
      private val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
          ResponseField.forObject("launch", "launch", mapOf<String, Any?>(
            "id" to mapOf<String, Any?>(
              "kind" to "Variable",
              "variableName" to "launchId")), true, null)
          )

      public operator fun invoke(reader: ResponseReader): Data = reader.run {
        val launch = readObject<Launch>(RESPONSE_FIELDS[0]) { reader ->
          Launch(reader)
        }
        Data(
          launch = launch
        )
      }

      @Suppress("FunctionName")
      public fun Mapper(): ResponseFieldMapper<Data> = ResponseFieldMapper { invoke(it) }
    }
  }

  public companion object {
    public const val OPERATION_ID: String =
        "f045c0ee2155d734a5aca93d485b4c3c4b011e7ba715ba2cf5ff3291dac55566"

    public val QUERY_DOCUMENT: String = QueryDocumentMinifier.minify(
          """
          |query SpaceLaunchDetails(${'$'}launchId: ID!) {
          |  launch(id: ${'$'}launchId) {
          |    __typename
          |    id
          |    mission_name
          |    launch_date_local
          |    details
          |    launch_success
          |    launch_site {
          |      __typename
          |      site_name
          |    }
          |    rocket {
          |      __typename
          |      rocket_name
          |    }
          |    links {
          |      __typename
          |      flickr_images
          |    }
          |  }
          |}
          """.trimMargin()
        )

    public val OPERATION_NAME: OperationName = object : OperationName {
      public override fun name(): String = "SpaceLaunchDetails"
    }
  }
}
